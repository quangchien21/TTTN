#define BLYNK_TEMPLATE_ID "TMPL6DXcTCaWc"
#define BLYNK_TEMPLATE_NAME "Gas Leaks"
#define BLYNK_AUTH_TOKEN "c7Y3Vjsd-2isqnOFm6t5owzqKUre8rF3"

#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <FirebaseESP8266.h>

// üîπ WiFi Credentials
#define WIFI_SSID "Redmi Note 10 Pro"
#define WIFI_PASSWORD "21022003"

// üîπ Firebase Credentials
#define FIREBASE_HOST "https://toado-xetuhanh-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "5C0AJ1ZI4CaJaYYjhECgcaoumCDse8vyX5siEICN"

// üîπ Firebase Config
FirebaseData firebaseData;
FirebaseConfig firebaseConfig;
FirebaseAuth firebaseAuth;
FirebaseJson jsonData;

// üîπ Serial gi·ªØa ESP8266 & Arduino
#define RX_PIN 4  // D2
#define TX_PIN 5  // D1
SoftwareSerial espSerial(RX_PIN, TX_PIN);

// üîπ GPS k·∫øt n·ªëi qua SoftwareSerial (D7 = RX, D8 = TX)
#define GPS_RX 15  // D7
#define GPS_TX 13  // D8
SoftwareSerial gpsSerial(GPS_RX, GPS_TX);
TinyGPSPlus gps;

// üîπ Bi·∫øn tr·∫°ng th√°i
char trangThai = '4'; // M·∫∑c ƒë·ªãnh l√† D·ª™NG
BlynkTimer timer;
int gpsIndex = 0; // B·∫Øt ƒë·∫ßu t·ª´ GPS0

// üîπ K·∫øt n·ªëi WiFi
void connectWiFi() {
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("ƒêang k·∫øt n·ªëi WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
}

// üîπ K·∫øt n·ªëi Firebase
void connectFirebase() {
    firebaseConfig.host = FIREBASE_HOST;
    firebaseConfig.signer.tokens.legacy_token = FIREBASE_AUTH;

    Firebase.begin(&firebaseConfig, &firebaseAuth);
    Firebase.reconnectWiFi(true);

    Serial.println("‚úÖ Firebase ƒë√£ k·∫øt n·ªëi!");
}

// üîπ L·∫•y th·ªùi gian t·ª´ GPS v√† chuy·ªÉn sang gi·ªù Vi·ªát Nam
String getVietnamTime() {
    if (gps.time.isValid() && gps.date.isValid()) {
        int hourVN = gps.time.hour() + 7;
        if (hourVN >= 24) hourVN -= 24;

        char datetime[25];
        sprintf(datetime, "%02d/%02d/%04d %02d:%02d:%02d",
                gps.date.day(), gps.date.month(), gps.date.year(),
                hourVN, gps.time.minute(), gps.time.second());

        return String(datetime);
    } else {
        return "Ch∆∞a c√≥ th·ªùi gian GPS";
    }
}

// üîπ G·ª≠i d·ªØ li·ªáu GPS l√™n Firebase theo nh√≥m (T0, T1, T2...)
void sendToFirebase(float lat, float lon, String datetime) {
  if (WiFi.status() != WL_CONNECTED) {
        Serial.println("üö® WiFi b·ªã m·∫•t, kh√¥ng g·ª≠i Firebase!");
        return;
    }
    jsonData.clear();
    jsonData.set("datetime", datetime);
    jsonData.set("latitude", lat);
    jsonData.set("longitude", lon);

    int groupIndex = (gpsIndex < 10) ? 0 : (gpsIndex / 100) + 1;
    String path = "/ToaDo/T" + String(groupIndex) + "/GPS" + String(gpsIndex);

    if (Firebase.updateNode(firebaseData, path, jsonData)) {
        Serial.print("‚úÖ D·ªØ li·ªáu ƒë√£ g·ª≠i l√™n Firebase t·∫°i: ");
        Serial.println(path);
        gpsIndex++;
    } else {
        Serial.print("‚ùå L·ªói Firebase: ");
        Serial.println(firebaseData.errorReason());
    }

}

// üîπ G·ª≠i d·ªØ li·ªáu GPS l√™n Blynk khi ph√°t hi·ªán kh√≠ gas v∆∞·ª£t ng∆∞·ª°ng
void sendGPSToBlynk() {
    if (gps.location.isValid() && gps.date.isValid() && gps.time.isValid()) {
        float latitude = gps.location.lat();
        float longitude = gps.location.lng();
        String datetime = getVietnamTime();

        String gpsData = datetime + "|" + String(latitude, 6) + "," + String(longitude, 6);

        Serial.println("üöÄ G·ª≠i GPS l√™n Blynk: " + gpsData);
        Blynk.virtualWrite(V5, gpsData);
    } else {
        Serial.println("üö® Kh√¥ng c√≥ t√≠n hi·ªáu GPS ƒë·ªÉ g·ª≠i l√™n Blynk!");
        // Blynk.virtualWrite(V11, gpsData);
    }
}

// üîπ G·ª≠i d·ªØ li·ªáu GPS l√™n Firebase m·ªói 5 gi√¢y
void sendGPSToFirebase() {
    if (gps.location.isValid()) {
        float latitude = gps.location.lat();
        float longitude = gps.location.lng();
        String datetime = getVietnamTime();

        Serial.print("üõ∞ G·ª≠i GPS l√™n Firebase: ");
        Serial.println(datetime + " | " + String(latitude, 6) + ", " + String(longitude, 6));

        sendToFirebase(latitude, longitude, datetime);
    } else {
        Serial.println("üö® Ch∆∞a c√≥ d·ªØ li·ªáu GPS ƒë·ªÉ g·ª≠i l√™n Firebase!");
        // sendToFirebase(156.238, 253.265, "16/03/2025 15:30:45");
    }
}

void setup() {
    Serial.begin(115200);
    espSerial.begin(9600);   // Giao ti·∫øp v·ªõi Arduino
    gpsSerial.begin(9600);  // Giao ti·∫øp v·ªõi GPS

    espSerial.setTimeout(200);  // üîπ Tr√°nh b·ªã treo khi kh√¥ng c√≥ \n

    connectWiFi();
    connectFirebase();
    Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_SSID, WIFI_PASSWORD);

    Serial.println("ESP8266 k·∫øt n·ªëi Blynk...");

    // C·ª© 7 gi√¢y g·ª≠i GPS l√™n Firebase
    timer.setInterval(7000L, sendGPSToFirebase);
    Blynk.virtualWrite(V5, " ");
}

void handleSerialInput() {
  if (espSerial.available()) {
    String data = espSerial.readStringUntil('\n');

    if (data.length() == 0) return;  // Kh√¥ng l√†m g√¨ n·∫øu chu·ªói r·ªóng

    if (data.startsWith("Gas:")) {
      int giatri_gas = data.substring(4).toInt();
      Blynk.virtualWrite(V4, data.substring(4).toInt());
      Serial.println("Gas: " +  String(giatri_gas));

      if (giatri_gas >= 500) {
            Serial.println("üö® Ph√°t hi·ªán kh√≠ gas v∆∞·ª£t ng∆∞·ª°ng!");
            Blynk.virtualWrite(V7, "üö® Ph√°t hi·ªán v·ªã tr√≠ r√≤ r·ªâ!");
            Blynk.virtualWrite(V6, 1);

            // G·ª≠i GPS l√™n Blynk n·∫øu ph√°t hi·ªán kh√≠ gas
            sendGPSToBlynk();
      } else if(giatri_gas < 500 && giatri_gas >= 300) {
            Blynk.virtualWrite(V7, "‚ö†Ô∏è Kh√≠ gas nguy hi·ªÉm");
            Blynk.virtualWrite(V6, 0);
      } else {
            Blynk.virtualWrite(V7, "‚úÖ B√¨nh th∆∞·ªùng");
            Blynk.virtualWrite(V6, 0);
      }

    } else if (data.startsWith("V8:")) {
      Blynk.virtualWrite(V8, data.substring(3).toInt());
      int mode = data.substring(3).toInt();
      if(mode == 0){
        Serial.println("Mode Auto");
      } else{
        Serial.println("Mode Th·ªß C√¥ng");
      } 
    }
  }
}

void loop() {
    if (gpsSerial.available()) {
        gps.encode(gpsSerial.read());
    }
    Blynk.run();
    timer.run();
    handleSerialInput();
    }

//üîπ G·ª≠i l·ªánh ƒë·∫øn Arduino n·∫øu tr·∫°ng th√°i thay ƒë·ªïi
void guiLenh(int lenh) {
    if (trangThai != lenh) {
        trangThai = lenh;
        espSerial.println("V:" + String(lenh));
        Serial.print("G·ª≠i l·ªánh: ");
        Serial.println(lenh);
    }else {
        Serial.print("‚ö†Ô∏è L·ªánh kh√¥ng thay ƒë·ªïi, kh√¥ng g·ª≠i: ");
        Serial.println(lenh);
    }
}

// üîπ Nh·∫≠n l·ªánh t·ª´ Blynk v√† g·ª≠i ƒë·∫øn Arduino
BLYNK_WRITE(V8) { 
  int value = param.asInt(); 
  if(value == 1){
    espSerial.println("V:5");
    Serial.print("G·ª≠i l·ªánh: 5" );
    
  }
  else{
     espSerial.println("V:6");
     Serial.print("G·ª≠i l·ªánh: 6" );
  }                                     
}
BLYNK_WRITE(V0) { int value = param.asInt(); Serial.println("Gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c t·ª´ V0: " + String(value)); guiLenh(value == 1 ? '7' : '4'); }
BLYNK_WRITE(V1) { int value = param.asInt(); Serial.println("Gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c t·ª´ V0: " + String(value)); guiLenh(value == 1 ? '8' : '4'); }
BLYNK_WRITE(V2) { int value = param.asInt(); Serial.println("Gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c t·ª´ V0: " + String(value)); guiLenh(value == 1 ? '2' : '4'); }
BLYNK_WRITE(V3) { int value = param.asInt(); Serial.println("Gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c t·ª´ V0: " + String(value)); guiLenh(value == 1 ? '3' : '4'); }

