
#include <Servo.h>
#include <SoftwareSerial.h>
Servo myservo;  
int pos = 0;    
int dongcoservo = 8;   

SoftwareSerial espSerial(12, 13); // RX, TX (K·∫øt n·ªëi v·ªõi ESP8266)

// ƒê·ªãnh nghƒ©a ch√¢n c·∫£m bi·∫øn kh√≠ gas
#define GAS_SENSOR A0  // Ch√¢n analog ƒë·ªçc gi√° tr·ªã t·ª´ c·∫£m bi·∫øn kh√≠ gas

// ƒê·ªãnh nghƒ©a ch√¢n ƒëi·ªÅu khi·ªÉn L298N
#define IN1 5  // ƒêi·ªÅu khi·ªÉn chi·ªÅu quay motor b√™n tr√°i
#define IN2 6
#define ENA 3 // ƒêi·ªÅu khi·ªÉn t·ªëc ƒë·ªô motor b√™n tr√°i

#define IN3 9  // ƒêi·ªÅu khi·ªÉn chi·ªÅu quay motor b√™n ph·∫£i
#define IN4 10
#define ENB 11  // ƒêi·ªÅu khi·ªÉn t·ªëc ƒë·ªô motor b√™n ph·∫£i

// T·ªëc ƒë·ªô ƒë·ªông c∆°
#define MAX_SPEED 255
#define NORMAL_SPEED 70
#define SLOW_SPEED 60

// Ng∆∞·ª°ng ph√°t hi·ªán kh√≠ gas
#define GAS_THRESHOLD 250  // Gi√° tr·ªã n√†y c·∫ßn ƒëi·ªÅu ch·ªânh d·ª±a tr√™n c·∫£m bi·∫øn c·ª• th·ªÉ
#define GAS_MAX 500  // Gi√° tr·ªã kh√≠ gas c·∫£nh b√°o

// Bi·∫øn l∆∞u tr·ªØ
int gasValue = 0;         // Gi√° tr·ªã ƒë·ªçc t·ª´ c·∫£m bi·∫øn
int previousGasValue = 0; // Gi√° tr·ªã tr∆∞·ªõc ƒë√≥ ƒë·ªÉ so s√°nh
int maxGasValue = 0;      // Gi√° tr·ªã kh√≠ gas cao nh·∫•t t√¨m th·∫•y
int searchState = 0;      // Tr·∫°ng th√°i t√¨m ki·∫øm (0: t√¨m ki·∫øm, 1: t·ªõi g·∫ßn ngu·ªìn, 2: x√°c ƒë·ªãnh v·ªã tr√≠ ch√≠nh x√°c)

bool foundLeak = false;  // ƒê√°nh d·∫•u n·∫øu ƒë√£ t√¨m th·∫•y v·ªã tr√≠ r√≤ r·ªâ
const int trig = 7;  
const int echo = 4; 
int gioihan = 30;
unsigned long thoigian;
int khoangcach, khoangcachtrai, khoangcachphai;

int mode = 0; // 1 - Auto; 0 - Th·ªß c√¥ng
int c; // l∆∞u l·ªánh g·ª≠i t·ª´ app
unsigned long lastGasSentTime = 0; 

void setup() {
  Serial.begin(115200);
  espSerial.begin(9600); // K·∫øt n·ªëi v·ªõi ESP8266
  myservo.attach(dongcoservo); 

  pinMode(GAS_SENSOR, INPUT);
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  
  stopMotors();
  
  Serial.println("Robot d√≤ kh√≠ gas ƒë√£ s·∫µn s√†ng!");
  delay(1000);
}

void quayServo(int goc) {
  myservo.write(goc);  
  delay(1000);         
}

void dokhoangcach() {
  digitalWrite(trig, LOW); 
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);  
  delayMicroseconds(10); 
  digitalWrite(trig, LOW); 
  thoigian = pulseIn(echo, HIGH, 50000);
  khoangcach = thoigian / 2 / 29.412;
}

void tranh_vat_can () {
  dokhoangcach();
  Serial.println(khoangcach);

  if (khoangcach > gioihan || khoangcach == 0) {
    Serial.println("Di toi");
    moveForward(NORMAL_SPEED);
    return;
  } else {
    di_vong_vat_can();
  }
}

void di_vong_vat_can() {
  // ƒêo kho·∫£ng c√°ch b√™n ph·∫£i
  quayServo(30); 
  delay(800);
  dokhoangcach(); 
  khoangcachphai = khoangcach; 
  Serial.print("Kho·∫£ng c√°ch ph·∫£i: "); 
  Serial.println(khoangcachphai); 
  
  
  // ƒêo kho·∫£ng c√°ch b√™n tr√°i
  quayServo(150); 
  delay(800);
  dokhoangcach(); 
  khoangcachtrai = khoangcach; 
  Serial.print("Kho·∫£ng c√°ch tr√°i: "); 
  Serial.println(khoangcachtrai); 
   
  // Quay v·ªÅ v·ªã tr√≠ trung t√¢m
  quayServo(90);

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán tr√°nh v·∫≠t c·∫£n
  if (khoangcachtrai < gioihan && khoangcachphai < gioihan) {
    // N·∫øu c·∫£ hai b√™n ƒë·ªÅu kh√¥ng an to√†n, l√πi l·∫°i
    dilui(); mode = 1; espSerial.println("V8:" + String(mode)); // chuy·ªÉn sang th·ªß c√¥ng 
    delay(500);
    myservo.detach();
    Serial.println("L√πi l·∫°i do kh√¥ng c√≥ kho·∫£ng tr·ªëng. Chuy·ªÉn sang Th·ªß C√¥ng!");
    return;
  } else if (khoangcachtrai > khoangcachphai && khoangcachtrai > gioihan) {
    // N·∫øu b√™n tr√°i an to√†n h∆°n, quay tr√°i
    turnLeft(90); 
    delay(1000); 
    stopMotors();
    delay(1000);
    moveForward(70);

    // Tr·ªü l·∫°i h∆∞·ªõng c≈©
    delay(1000);
    turnRight(80);
    delay(1000); 
    stopMotors();
    delay(1000);
    moveForward(70);
    delay(2000);
    turnLeft(80);
    delay(1000);
    stopMotors();
    delay(2000);
    Serial.println("Tro lai huong ban dau");
    moveForward(NORMAL_SPEED);
    
  } else if (khoangcachphai >= khoangcachtrai && khoangcachphai > gioihan) {
    // N·∫øu b√™n ph·∫£i an to√†n h∆°n ho·∫∑c b·∫±ng b√™n tr√°i, quay ph·∫£i
    turnRight(80);
    delay(1000);
    stopMotors();
    delay(2000);
    moveForward(70);

    // Tr·ªü l·∫°i h∆∞·ªõng c≈©
    delay(1000);
    turnLeft(80);
    delay(1000); 
    stopMotors();
    delay(2000);
    moveForward(70);
    delay(2000);
    turnRight(75);
    delay(500);
    stopMotors();
    delay(2000); 
    Serial.println("Tro lai huong ban dau");
    moveForward(NORMAL_SPEED);
  }
}

void dilui() {
  analogWrite(ENA, 100);
  analogWrite(ENB, 100);
  digitalWrite(IN1, 1);
  digitalWrite(IN2, 0);
  digitalWrite(IN3, 1);
  digitalWrite(IN4, 0);

  delay(1000);
  stopMotors();
}

void check_mode(){
  if (espSerial.available()) {
    String command = espSerial.readStringUntil('\n');
    if (command.startsWith("V:")) {
      c = command.substring(2).toInt();

      Serial.print("üì• Nh·∫≠n l·ªánh t·ª´ ESP8266: ");
      Serial.println(c);
    }
  }
  if(c == 5){
    mode = 1; // ch·∫ø ƒë·ªô tc
  } else if(c == 6){
    mode = 0; // ch·∫ø ƒë·ªô at
  } else if(c==7 || c== 8 || c==2 || c==3 || c==4 ){
    Serial.println("L·ªánh Di Chuy·ªÉn");
  } else{
    Serial.println("Ch∆∞a c√≥ l·ªánh");
  }
}

void loop() {
   if (foundLeak) {
    stopMotors();
    return;  
  }
    
  gasValue = analogRead(GAS_SENSOR);
  
  Serial.print("Gi√° tr·ªã kh√≠ gas: ");
  Serial.println(gasValue);
  // G·ª≠i gi√° tr·ªã ƒë·∫øn ESP8266 2s 1 l·∫ßn
  if (millis() - lastGasSentTime >= 2000) {
      espSerial.println("Gas: " + String(gasValue));
      lastGasSentTime = millis();
    } 
  
  check_mode(); // Ki·ªÉm tra l·ªánh t·ª´ app

  // mode t·ª± h√†nh - Auto
  if(mode == 0){
    myservo.attach(dongcoservo);
    espSerial.println("V8:" + String(mode)); // ƒë·ªìng b·ªô d·ªØ li·ªáu mode l√™n app
    if (gasValue > GAS_THRESHOLD) {
      if (gasValue > maxGasValue) { 
        maxGasValue = gasValue;
        
        if (gasValue > previousGasValue && gasValue < GAS_MAX) {
          searchState = 1;  
        } 
        else if(gasValue >= GAS_MAX) {
          searchState = 2;  
          // espSerial.println("Gas: " + String(gasValue));
        }
      } 
      else {
        searchState = 0;  
      }
    }
  
    previousGasValue = gasValue;
  
    switch (searchState) {
      case 0:  
        searchPattern();
        break;
        
      case 1:  
        tranh_vat_can();
        // moveForward(SLOW_SPEED);
        Serial.println("Ti·∫øn v·ªÅ v·ªã tr√≠ r√≤ r·ªâ");
        delay(3000);
        break;
        
      case 2:  
        Serial.println("ƒê√É T√åM TH·∫§Y V·ªä TR√í R√í R·ªà KH√ç GAS!");
        stopMotors();
        foundLeak = true;  
        delay(5000);
        break;
    }
  } 
  // mode Th·ªß c√¥ng
  else{
    myservo.detach();
    espSerial.println("V8:" + String(mode));
    if (gasValue >= GAS_MAX) { 
        Serial.println("ƒê√É T√åM TH·∫§Y V·ªä TR√í R√í R·ªà KH√ç GAS!");
        stopMotors(); // D·ª´ng xe l·∫°i
        foundLeak = true; 
        delay(500);
        return;
    }
    switch (c) {
      case '7': move(100,0,1,0,1); Serial.println("ƒêi t·ªõi"); break; delay(2000);
      case '8': move(100,1,0,1,0); Serial.println("ƒêi l√πi"); break; delay(2000);
      case '2': move(100,1,0,0,0); Serial.println("ƒêi sang tr√°i"); break; delay(2000);
      case '3': move(100,0,0,1,0); Serial.println("ƒêi sang ph·∫£i"); break; delay(2000);
      case '4': stopMotors(); break;
      case '5': mode = 0; Serial.println("Ch·∫ø ƒë·ªô Auto");
      case '6': mode = 1; stopMotors(); Serial.println("Ch·∫ø ƒë·ªô Th·ªß C√¥ng"); break; // Ch·ªâ ƒë·ªïi mode, kh√¥ng ƒëi·ªÅu khi·ªÉn
      default: Serial.println("L·ªánh kh√¥ng h·ª£p l·ªá"); break;
    }
  }
  delay(100);
}

void moveForward(int speed) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, speed);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, speed);

  Serial.println("ƒêang ti·∫øn t·ªõi");
  delay(500);
  stopMotors();

}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
  
  Serial.println("ƒê√£ d·ª´ng");
}

void turnLeft(int speed) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, speed);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, speed);
  
  Serial.println("ƒêang quay tr√°i");
}

void turnRight(int speed) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, speed);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, speed);
  
  Serial.println("ƒêang quay ph·∫£i");
}

void move(int speed, int i1, int i2, int i3, int i4) {
    analogWrite(ENA, speed);
    analogWrite(ENB, speed);
    digitalWrite(IN1, i1);
    digitalWrite(IN2, i2);
    digitalWrite(IN3, i3);
    digitalWrite(IN4, i4);
}

void searchPattern() {
  int frontGas, leftGas, rightGas;

  quayServo(90);
  delay(500);
  frontGas = analogRead(GAS_SENSOR);
  Serial.print("Kh√≠ gas ph√≠a tr∆∞·ªõc: ");
  Serial.println(frontGas);

  quayServo(150);
  delay(500);
  leftGas = analogRead(GAS_SENSOR);
  Serial.print("Kh√≠ gas b√™n tr√°i: ");
  Serial.println(leftGas);
  

  quayServo(30);
  delay(500);
  rightGas = analogRead(GAS_SENSOR);
  Serial.print("Kh√≠ gas b√™n ph·∫£i: ");
  Serial.println(rightGas);
  
  quayServo(90); // quay v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu

  if (frontGas >= leftGas && frontGas >= rightGas) {
    espSerial.println("Gas: " + String(frontGas));
    Serial.println("Ti·∫øn th·∫≥ng");
    tranh_vat_can();
  } else if (leftGas > rightGas) {
    espSerial.println("Gas: " + String(leftGas));
    Serial.println("R·∫Ω tr√°i");
    turnLeft(65);
    delay(1000);
    stopMotors();
    delay(2000);
    tranh_vat_can();
  } else {
    espSerial.println("Gas: " + String(rightGas));
    Serial.println("R·∫Ω ph·∫£i");
    turnRight(SLOW_SPEED);
    delay(1000);
    stopMotors();
    delay(2000);
    tranh_vat_can();
  }
  
  delay(1000);
}
